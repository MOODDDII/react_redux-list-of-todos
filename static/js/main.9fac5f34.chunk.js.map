{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","initialState","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","selectedTodo","isSelected","id","visibleTodos","lowerQuery","toLocaleLowerCase","completed","title","includes","length","className","map","classNames","onClick","currentTodoActions","TodoFilter","onSubmit","event","preventDefault","value","onChange","e","filterActions","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","user","setUser","Error","useEffect","userId","href","email","name","App","hasTodos","hasSelectedTodo","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9fac5f34.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = {\n  type: 'filter/SET_QUERY';\n  payload: string;\n};\n\ntype SetStatusAction = {\n  type: 'filter/SET_STATUS';\n  payload: Status;\n};\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nexport const actions = { setQuery, setStatus };\n\ntype State = {\n  query: string;\n  status: Status;\n};\n\nconst initialState: State = {\n  query: '',\n  status: 'all',\n};\n\ntype Action = SetQueryAction | SetStatusAction;\n\nconst filterReducer = (state: State = initialState, action: Action): State => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return { ...state, query: action.payload };\n\n    case 'filter/SET_STATUS':\n      return { ...state, status: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype Action = SetTodosAction;\n\nconst todosReducer = (todos: Todo[] = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const isSelected = (todo: Todo) => selectedTodo?.id === todo.id;\n\n  const visibleTodos = useAppSelector(({ filter, todos }) => {\n    if (filter.status === 'all' && !filter.query) {\n      return todos;\n    }\n\n    const lowerQuery = filter.query.toLocaleLowerCase();\n\n    return todos.filter(todo => {\n      if (filter.status === 'active' && todo.completed) {\n        return false;\n      }\n\n      if (filter.status === 'completed' && !todo.completed) {\n        return false;\n      }\n\n      return todo.title.toLocaleLowerCase().includes(lowerQuery);\n    });\n  });\n\n  if (visibleTodos.length === 0) {\n    return (\n      <p className=\"notification is-warning\">\n        There are no todos matching current filter criteria\n      </p>\n    );\n  }\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {visibleTodos.map(todo => (\n          <tr\n            key={todo.id}\n            data-cy=\"todo\"\n            className={classNames({\n              'has-background-info-light': isSelected(todo),\n            })}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={classNames({\n                  'has-text-danger': !todo.completed,\n                  'has-text-success': todo.completed,\n                })}\n              >\n                {todo.title}\n              </p>\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => dispatch(\n                  currentTodoActions.setTodo(todo),\n                )}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={classNames('far', {\n                      'fa-eye': !isSelected(todo),\n                      'fa-eye-slash': isSelected(todo),\n                    })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { query, status } = useAppSelector(state => state.filter);\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={e => dispatch(\n              filterActions.setStatus(e.target.value as Status),\n            )}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={e => dispatch(\n            filterActions.setQuery(e.target.value),\n          )}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(\n                filterActions.setQuery(''),\n              )}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const dispatch = useAppDispatch();\n  const todo = useAppSelector(state => state.currentTodo);\n\n  if (!todo) {\n    throw new Error('Modal can\\'t be used with no todo');\n  }\n\n  useEffect(() => {\n    getUser(todo.userId).then(setUser);\n  }, [todo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(\n                currentTodoActions.removeTodo(),\n              )}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{todo.title}</p>\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>{user.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const hasTodos = useAppSelector(state => state.todos.length > 0);\n  const hasSelectedTodo = useAppSelector(state => state.currentTodo !== null);\n\n  useEffect(() => {\n    getTodos().then(todos => dispatch(\n      actions.setTodos(todos),\n    ));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            {!hasTodos ? (\n              <Loader />\n            ) : (\n              <>\n                <h1 className=\"title\">Todos:</h1>\n\n                <div className=\"block\">\n                  <TodoFilter />\n                </div>\n\n                <div className=\"block\">\n                  <TodoList />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {hasSelectedTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}